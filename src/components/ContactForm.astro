---
// ContactForm.astro
---

<div class="contact-form-container">
  <form id="contact-form" class="contact-form">
    <div class="form-group">
      <label for="name">Name *</label>
      <input type="text" id="name" name="name" required>
    </div>
    
    <div class="form-group">
      <label for="email">Email *</label>
      <input type="email" id="email" name="email" required>
    </div>
    
    <div class="form-group">
      <label for="subject">Subject *</label>
      <input type="text" id="subject" name="subject" required>
    </div>
    
    <div class="form-group">
      <label for="message">Message *</label>
      <textarea id="message" name="message" rows="6" required></textarea>
    </div>
    
    <button type="submit" class="submit-btn" id="submit-btn">
      <span class="btn-text">Send Message</span>
      <span class="btn-loading" style="display: none;">Sending...</span>
    </button>
  </form>
  
  <div id="form-message" class="form-message" style="display: none;"></div>
</div>

<style>
  .contact-form-container {
    max-width: 600px;
    margin: 2rem auto;
    padding: 0 1rem;
  }

  .contact-form {
    background: var(--sl-color-bg-nav);
    padding: 2rem;
    border-radius: 12px;
    border: 1px solid var(--sl-color-gray-5);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
    color: var(--sl-color-white);
  }

  .form-group input,
  .form-group textarea {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid var(--sl-color-gray-5);
    border-radius: 6px;
    background: var(--sl-color-black);
    color: var(--sl-color-white);
    font-size: 1rem;
    transition: border-color 0.2s ease;
  }

  .form-group input:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--sl-color-accent);
    box-shadow: 0 0 0 3px rgba(var(--sl-color-accent-rgb), 0.1);
  }

  .form-group textarea {
    resize: vertical;
    min-height: 120px;
  }

  .submit-btn {
    background: linear-gradient(135deg, var(--sl-color-accent), var(--sl-color-accent-high));
    color: white;
    border: none;
    padding: 0.875rem 2rem;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    min-width: 140px;
  }

  .submit-btn:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(var(--sl-color-accent-rgb), 0.3);
  }

  .submit-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  .form-message {
    margin-top: 1rem;
    padding: 1rem;
    border-radius: 6px;
    font-weight: 500;
  }

  .form-message.success {
    background: rgba(34, 197, 94, 0.1);
    color: rgb(34, 197, 94);
    border: 1px solid rgba(34, 197, 94, 0.3);
  }

  .form-message.error {
    background: rgba(239, 68, 68, 0.1);
    color: rgb(239, 68, 68);
    border: 1px solid rgba(239, 68, 68, 0.3);
  }

  @media (max-width: 640px) {
    .contact-form {
      padding: 1.5rem;
    }
    
    .contact-form-container {
      padding: 0 0.5rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contact-form') as HTMLFormElement;
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
    const btnText = submitBtn.querySelector('.btn-text') as HTMLElement;
    const btnLoading = submitBtn.querySelector('.btn-loading') as HTMLElement;
    const messageDiv = document.getElementById('form-message') as HTMLElement;

    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Show loading state
      submitBtn.disabled = true;
      btnText.style.display = 'none';
      btnLoading.style.display = 'inline';
      messageDiv.style.display = 'none';

      try {
        const formData = new FormData(form);
        
        const response = await fetch('/api/contact', {
          method: 'POST',
          body: formData
        });

        const result = await response.json();

        if (response.ok && result.success) {
          // Success
          messageDiv.textContent = result.message;
          messageDiv.className = 'form-message success';
          messageDiv.style.display = 'block';
          form.reset();
        } else {
          // Error
          messageDiv.textContent = result.error || 'An error occurred. Please try again.';
          messageDiv.className = 'form-message error';
          messageDiv.style.display = 'block';
        }
      } catch (error) {
        // Network error
        messageDiv.textContent = 'Network error. Please check your connection and try again.';
        messageDiv.className = 'form-message error';
        messageDiv.style.display = 'block';
      } finally {
        // Reset button state
        submitBtn.disabled = false;
        btnText.style.display = 'inline';
        btnLoading.style.display = 'none';
      }
    });
  });
</script>
